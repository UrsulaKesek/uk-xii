{"version":3,"sources":["components/Input/index.jsx","components/Form/index.jsx","components/Toggle/index.jsx","components/SingleWeatherCard/index.jsx","App.js","constants/index.js","serviceWorker.js","index.js"],"names":["Input","label","id","props","className","htmlFor","Form","children","Toggle","isOn","handleToggle","onColor","checked","onChange","type","style","background","SingleWeatherCard","city","data","useState","temp","setTemp","main","toFixed","temp_min","temp_max","humidity","rain","weather","description","alt","src","icon","App","query","setQuery","setData","aria-label","role","onSubmit","event","preventDefault","loading","fetch","window","location","protocol","units","then","res","ok","json","weatherData","error","statusText","target","value","placeholder","disabled","onClick","JSON","stringify","Boolean","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.04c55c9b.chunk.js","sourcesContent":["import React from 'react'\nimport \"./Input.css\";\n\nconst Input = ({label,id,...props})=>(\n    <>\n    <div className=\"city\">\n    {label && <label className=\"label\" htmlFor={id}>{label}</label>}\n    <input className=\"input\" id={id}{...props}/>\n    </div>\n    </>\n)\nexport default Input\n\n","import React from 'react'\nimport \"./Form.css\";\n\nconst Form = ({children, ...props})=> \n<form className=\"form\" {...props}>{children}</form>\n\nexport default Form;\n","import React from \"react\";\nimport \"./Toggle.css\";\n\nconst Toggle = ({ isOn, handleToggle, onColor }) => {\n  return (\n    <>\n      <input\n        checked={isOn}\n        onChange={handleToggle}\n        className=\"toggle-checkbox\"\n        id={`toggle-new`}\n        type=\"checkbox\"\n      />\n      <label\n        style={{ background: isOn && onColor }}\n        className=\"toggle-label\"\n        htmlFor={`toggle-new`}\n      >\n        <span className={`toggle-button`} />\n      </label>\n    </>\n  );\n};\n\nexport default Toggle;\n","import React, { useState } from \"react\";\nimport \"./SingleWeatherCard.css\";\nimport Toggle from \"../Toggle\";\n\nfunction SingleWeatherCard({ city, data }) {\n  const [temp, setTemp] = useState(\"0\");\n  return (\n    <div className=\"weather-card\">\n      <div className=\"temp\">\n        <h3>Temperature</h3>\n        <div className=\"radios\">\n          <h4 className=\"fah\">\n            {data.main.temp\n              ? `${((data.main.temp - 273.15) * 1.8 + 32).toFixed(0)} ° F`\n              : \"\"}\n          </h4>\n          <Toggle\n            isOn={temp}\n            onColor=\"white\"\n            handleToggle={() => setTemp(!temp)}\n          />\n          <h4 className=\"cel\">\n            {data.main.temp\n              ? `${(data.main.temp - 273.15).toFixed(0)} ° C`\n              : \"\"}\n          </h4>\n        </div>\n      </div>\n      <div className=\"minmaxhum\">\n        <h4>\n          {data.main.temp_min\n            ? ` Min:${(data.main.temp_min - 273.15).toFixed(0)} ° C`\n            : \"\"}\n        </h4>\n        <h4>\n          {data.main.temp_max\n            ? ` Max:${(data.main.temp_max - 273.15).toFixed(0)} ° C`\n            : \"\"}\n        </h4>\n        <h5>{data.main.humidity ? `Humidity:${data.main.humidity}` : \"\"}</h5>\n      </div>\n      <h4>\n        {data.rain\n          ? `Chances of rain in ${city}:${(data.rain[\"1h\"] * 100).toFixed(0)}%`\n          : `Chances of rain in ${city} is 0%`}\n      </h4>\n      <h5>\n        {data.weather[0].description\n          ? `What's it like out there:${data.weather[0].description}`\n          : \"\"}\n      </h5>\n      <div className=\"icons\">\n        <h1>\n          <img\n            alt=\"weather-icon\"\n            className=\"icon\"\n            src={`http://openweathermap.org/img/wn/${data.weather[0].icon}.png`}\n          />\n        </h1>\n      </div>\n    </div>\n  );\n}\nexport default SingleWeatherCard;\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { Input, Form, SingleWeatherCard } from \"./components\";\nimport { API_KEY } from \"./constants\";\n  \n\nfunction App() {\n  const initialState = {\n    city: \"\",\n  };\n  const [query, setQuery] = useState(initialState);\n  const [data, setData] = useState({});\n\n  const onChange = (event) => {\n    setQuery({ ...query, [event.target.id]: event.target.value });\n  };\n  const onClick = (event) => {\n    event.preventDefault();\n    setData(`${data.main.temp}`);\n  };\n  const onSubmit = (event) => {\n    event.preventDefault();\n    setData({ ...data, city: query.city, loading: true });\n    fetch(\n      `${window.location.protocol}//api.openweathermap.org/data/2.5/weather?q=${query.city}&appid=${API_KEY}&units=${query.units}`\n    ).then((res) => {\n      if (!res.ok) {\n        setData({ ...data, error: res.statusText, loading: false });\n        return;\n      }\n      return res.json().then((weatherData) => {\n        setData({\n          ...data,\n          city: query.city,\n          weatherData,\n          loading: false,\n          error: null,\n        });\n      });\n    });\n  };\n  return (\n    <div className=\"app\">\n      <h2>\n        <span className=\"stormy\" aria-label=\"weather-app\" role=\"img\">\n          ⛈️\n        </span>\n        Weather App\n        <span className=\"stormy1\" aria-label=\"weather-app\" role=\"img\">\n          ⛈️\n        </span>\n      </h2>\n      <Form onSubmit={onSubmit}>\n        <Input\n          id=\"city\"\n          label=\"Choose City\"\n          onChange={onChange}\n          placeholder=\"Insert the city name here\"\n          type=\"text\"\n          city={query.city}\n        />\n        <button className=\"search\" disabled={data.loading || !query.city}>\n          {data.loading ? \"Loading...\" : \"Search!\"}\n        </button>\n      </Form>\n      {data.weatherData && (\n        <SingleWeatherCard\n          city={query.city}\n          data={data.weatherData}\n          onClick={onClick}\n        />\n      )}\n      {data.error && <div>{JSON.stringify(data.error)}</div>}\n    </div>\n  );\n}\n\nexport default App;\n","export const API_KEY = \"8cee7f2d45cd8c8754ca127ff2455bab\";\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}